name: API Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'sports-platform/api/**'
      - '.github/workflows/api-pipeline.yml'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
  ECS_SERVICE: sports-api
  ECS_CLUSTER: sports-platform-staging

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Run Tests
        run: |
          cd sports-platform/api/SportsApi
          dotnet test --collect:"XPlat Code Coverage"
          
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd sports-platform/api/SportsApi
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_SERVICE:ACTIVE \
            --query 'taskDefinition' > task-definition.json

      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_SERVICE }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: Build and push image to ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     cd sports-platform/api/SportsApi
      #     docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
      #     docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Update ECS task definition
      #   run: |
      #     aws ecs describe-task-definition \
      #       --task-definition $ECS_SERVICE \
      #       --query 'taskDefinition' > task-definition.json

      #     # Update image in task definition
      #     sed -i "s|$ECR_REPOSITORY:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" task-definition.json

      #     aws ecs register-task-definition \
      #       --cli-input-json file://task-definition.json

      # # - name: Build and push image to ECR
      # #   env:
      # #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      # #     IMAGE_TAG: ${{ github.sha }}
      # #   run: |
      # #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./sports-platform/api/SportsApi
      # #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service \
      #       --cluster $ECS_CLUSTER \
      #       --service $ECS_SERVICE \
      #       --force-new-deployment