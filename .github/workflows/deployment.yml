name: Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      deploy-type:
        required: true
        type: string
      s3-bucket:
        required: false
        type: string
      api-url:
        required: false
        type: string
      service-name:
        required: false
        type: string
      cluster-name:
        required: false
        type: string
      task-definition:
        required: false
        type: string
    secrets:
      AWS_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
      ECR_REPOSITORY_URI:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Website Deployment Steps
      - name: Setup Node.js
        if: inputs.deploy-type == 'website'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        if: inputs.deploy-type == 'website'
        run: |
          cd sports-platform/website
          npm ci

      - name: Build Website
        if: inputs.deploy-type == 'website'
        run: |
          cd sports-platform/website
          echo "NEXT_PUBLIC_API_URL=${{ inputs.api-url }}" > .env.production
          npm run build

      - name: Deploy to S3
        if: inputs.deploy-type == 'website'
        run: |
          aws s3 sync sports-platform/website/out s3://${{ inputs.s3-bucket }} \
            --delete \
            --cache-control "max-age=86400"

      # API Deployment Steps
      - name: Login to Amazon ECR
        if: inputs.deploy-type == 'api'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to ECR
        if: inputs.deploy-type == 'api'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd sports-platform/api/SportsApi
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        if: inputs.deploy-type == 'api'
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ inputs.task-definition }} \
            --query 'taskDefinition' > task-definition.json

      - name: Update task definition
        if: inputs.deploy-type == 'api'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.service-name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Clean task definition
        if: inputs.deploy-type == 'api'
        run: |
          jq 'del(.taskDefinitionArn, .status, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection)' \
            ${{ steps.task-def.outputs.task-definition }} > cleaned-task-definition.json

      - name: Deploy to ECS
        if: inputs.deploy-type == 'api'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: cleaned-task-definition.json
          service: ${{ inputs.service-name }}
          cluster: ${{ inputs.cluster-name }}
          wait-for-service-stability: true