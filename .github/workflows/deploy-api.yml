name: API Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      service-name:
        required: false
        type: string
      cluster-name:
        required: false
        type: string
      task-definition:
        required: false
        type: string
    secrets:
      AWS_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
      ECR_REPOSITORY_URI:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # API Deployment Steps
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd sports-platform/api/SportsApi
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ inputs.task-definition }} \
            --query 'taskDefinition' > task-definition.json

      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.service-name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Clean task definition
        run: |
          jq 'del(.taskDefinitionArn, .status, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection)' \
            ${{ steps.task-def.outputs.task-definition }} > cleaned-task-definition.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: cleaned-task-definition.json
          service: ${{ inputs.service-name }}
          cluster: ${{ inputs.cluster-name }}
          wait-for-service-stability: true
      
      - name: Monitor Deployment
        if: steps.deploy.outcome == 'success'
        run: |
          PREV_TASK_DEF=$(aws ecs describe-service \
            --cluster ${{ inputs.cluster-name }} \
            --service ${{ inputs.service-name }} \
            --query 'services[0].taskDefinition' \
            --output text)
          
          STATUS=$(aws ecs wait services-stable \
            --cluster ${{ inputs.cluster-name }} \
            --services ${{ inputs.service-name }})
          
          if [ $? -ne 0 ]; then
            echo "Deployment failed, rolling back..."
            aws ecs update-service \
              --cluster ${{ inputs.cluster-name }} \
              --service ${{ inputs.service-name }} \
              --task-definition $PREV_TASK_DEF \
              --force-new-deployment
            exit 1
          fi
      
      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            aws sns publish \
              --topic-arn arn:aws:sns:us-east-1:418272773173:sports-platform-alerts \
              --message "Deployment successful for ${{ github.ref }}"
          else
            aws sns publish \
              --topic-arn arn:aws:sns:us-east-1:418272773173:sports-platform-alerts \
              --message "Deployment failed for ${{ github.ref }}"
          fi
      